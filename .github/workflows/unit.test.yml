name: UI Unit Test

permissions:
  pull-requests: write
  contents: read

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/ui

    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/build-state.yml
            .yarn/install-state.gz
            .pnp.*
          key: ${{ runner.os }}-yarn-berry-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-berry-

      - name: Set up Yarn 2 (Berry)
        run: |
            corepack enable
            corepack prepare yarn@4.5.3 --activate
        
      - name: Install dependencies
        run: yarn install --immutable 

      - name: Check if tests exist
        id: check_tests
        run: |
          if [ ! -f $(find . -name '*.test.tsx' -or -name '*.spec.tsx' -or -name '*.test.ts' -or -name '*.spec.ts' | head -n 1) ]; then
            echo "No tests found, skipping test run"
            exit 0
          fi
          echo "Tests found, running tests with coverage"

      - name: Run tests with coverage
        if: steps.check_tests.outputs.test_exists == 'true'
        run: yarn test --coverage

      - name: Get Coverage Info
        if: steps.check_tests.outputs.test_exists == 'true'
        id: coverage
        run: |
          COVERAGE_REPORT=$(cat coverage/coverage-summary.json)
          echo "statements=$(echo $COVERAGE_REPORT | jq -r '.total.statements.pct')" >> $GITHUB_OUTPUT
          echo "branches=$(echo $COVERAGE_REPORT | jq -r '.total.branches.pct')" >> $GITHUB_OUTPUT
          echo "functions=$(echo $COVERAGE_REPORT | jq -r '.total.functions.pct')" >> $GITHUB_OUTPUT
          echo "lines=$(echo $COVERAGE_REPORT | jq -r '.total.lines.pct')" >> $GITHUB_OUTPUT

      - name: Comment PR with Coverage
        if: steps.check_tests.outputs.test_exists == 'true'
        uses: thollander/actions-comment-pull-request@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: |
            ## Test Coverage Report ðŸ“Š
            - Statements: ${{ steps.coverage.outputs.statements }}%
            - Branches: ${{ steps.coverage.outputs.branches }}%
            - Functions: ${{ steps.coverage.outputs.functions }}%
            - Lines: ${{ steps.coverage.outputs.lines }}%
